{"version":3,"sources":["componentes/TablaTrabajadores.js","App.js","reportWebVitals.js","index.js"],"names":["baseURL","useStyles","makeStyles","theme","modal","position","width","backgroundColor","palette","background","paper","border","boxShadow","shadows","padding","spacing","top","left","transform","iconos","cursor","inputMaterial","inputMaterial2","inputMaterial3","large","height","table","minWidth","root","container","maxHeight","StyledTableCell","withStyles","head","common","black","color","white","body","fontSize","TableCell","StyledTableRow","action","hover","TableRow","TablaTrabajadores","React","useState","page","setPage","rowsPerPage","setRowsPerPage","data","setData","ModalInfo","setModalInfo","modalEliminar","setModalEliminar","name","title","first","last","location","street","city","state","poscode","country","number","picture","dob","age","cell","email","login","uuid","datosSelected","setdatosSelected","handleChange","e","target","id","value","postcode","abrirCerrarModalInfo","abrirCerrarModalEliminar","seleccionarConsola","resp","caso","bodyEliminar","className","align","Button","onClick","eliminarTrabajador","useEffect","a","fetch","json","results","console","log","length","fetchData","n","filter","i","bodyInfo","Edit","boton","document","getElementsByName","removeAttribute","setAttribute","changeTextfield","Avatar","alt","src","TextField","disabled","variant","onChange","label","defaultValue","updateTrabajador","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableBody","slice","map","thumbnail","Delete","style","green","TablePagination","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","Modal","open","onClose","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4c3bf42e.chunk.js","sourcesContent":["//Importe de librerias necesarias\nimport React, { useState, useEffect } from \"react\";\nimport {\n    Table,\n    TableContainer,\n    TableHead,\n    TableCell,\n    TableBody,\n    TableRow,\n    Button,\n    TextField,\n    Modal,\n    TablePagination,\n    Paper,\n} from \"@material-ui/core\";\nimport { Edit, Delete } from \"@material-ui/icons\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Avatar from '@material-ui/core/Avatar';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport { green } from '@material-ui/core/colors';\n// ******************* fin del importe ****************\n\nconst baseURL = `https://randomuser.me/api/?results=100`;\n\n\n//Estilos para el modal, los botones y la tabla\nconst useStyles = makeStyles((theme) => ({\n    modal: {\n        position: \"absolute\",\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: \"2px solid #000\",\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n    iconos: {\n        cursor: \"pointer\",\n    },\n    inputMaterial: {\n        width: \"30%\",\n    },\n    inputMaterial2: {\n        width: \"40%\",\n    },\n    inputMaterial3: {\n        width: \"60%\",\n    },\n    large: {\n        width: theme.spacing(20),\n        height: theme.spacing(20),\n        left: \"30%\",\n    },\n    table: {\n        minWidth: 700,\n    },\n    //\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 840,\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n// *********************** fin de los estilos *******************\n\n\n\nconst TablaTrabajadores = () => {\n\n    //UseState para la paginacion de la tabla\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    //Funciones para cambiar de pagina y para mostrar registros por pagina\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n\n    const { modal, inputMaterial, inputMaterial2, inputMaterial3, iconos, large, table, container, root } = useStyles();\n    const [data, setData] = useState([]); //UseState  para los datos del trabajdor\n    const [ModalInfo, setModalInfo] = useState(false); //useState para el modal\n    const [modalEliminar, setModalEliminar] = useState(false);\n\n\n    const [datosSelected, setdatosSelected] = useState({\n        name: {\n            title: '',\n            first: '',\n            last: '',\n        },\n        location: {\n            street: '',\n            city: '',\n            state: '',\n            poscode: '',\n            country: '',\n            number: ''\n        },\n        picture: {\n            large: ''\n        },\n        dob: {\n            age: '',\n        },\n        cell: '',\n        email: '',\n        login: {\n            uuid: '',\n        }\n    })\n\n    //Funcion para actualizar los datos\n    const handleChange = e => {\n        const { id, value } = e.target;\n       \n        if(id==='title'){\n            datosSelected.name.title = value;\n        }else if(id==='first'){\n            datosSelected.name.first = value;\n        }else if(id==='last'){\n            datosSelected.name.last = value;\n        }else if(id==='street'){\n            datosSelected.location.street.name = value;\n        }else if(id==='number'){\n            datosSelected.location.street.number = value;\n        }else if(id==='city'){\n            datosSelected.location.city = value;\n        }else if(id==='state'){\n            datosSelected.location.state = value;\n        }else if(id==='country'){\n            datosSelected.location.country = value;\n        }else if(id==='postcode'){\n            datosSelected.location.postcode = value;\n        }else if(id==='age'){\n            datosSelected.dob.age = value;\n        }else if(id==='cell'){\n            datosSelected.cell = value;\n        }else if(id==='email'){\n            datosSelected.email= value;\n        }\n        \n        //console.log(\"id \", id, \" valor \", value)\n\n    }\n\n\n    //funcion para abrir o cerrar modal\n    const abrirCerrarModalInfo = () => {\n        setModalInfo(!ModalInfo);\n    }\n\n    const abrirCerrarModalEliminar = () => {\n        setModalEliminar(!modalEliminar);\n    }\n\n    //Funion que cambia el estado para mostrar la info del usuario\n    const seleccionarConsola = (resp, caso) => {\n        setdatosSelected(resp);\n        (caso === 'Editar') ? abrirCerrarModalInfo() : abrirCerrarModalEliminar()\n\n    }\n\n    const bodyEliminar = (\n        <div className={modal}>\n            <div align=\"center\">\n                <p>¿Deseas eliminar a <b>{datosSelected && datosSelected.name.first}</b> ? </p>\n                <Button color=\"secondary\" onClick={() => eliminarTrabajador()}>Sí</Button>\n                <Button onClick={() => abrirCerrarModalEliminar()}>No</Button>\n            </div>\n        </div>\n    )\n\n    //Funcion que hace el llamado a la API\n    useEffect(() => {\n        async function fetchData() {\n            const { results } = await (await fetch(baseURL)).json();\n            setData(results);\n            console.log(results.length);\n\n        }\n        fetchData();\n    }, []);\n\n    //Funcion que cambia el estado de los TextField\n    const changeTextfield = () => {\n        const boton = document.getElementsByName('textfield');\n        for (let i = 0; i < boton.length; i++) {\n            boton[i].removeAttribute('disabled');\n            boton[i].setAttribute('style', 'color: black')\n\n        }\n\n    }\n\n    //Funcion que cambia el estado de los TextField\n    const updateTrabajador = () => {\n        const id = datosSelected.login.uuid;\n        const n = data.filter(i => i.login.uuid === id);\n\n        n[0].name.title = datosSelected.name.title;\n        n[0].name.first = datosSelected.name.first;\n\n\n        abrirCerrarModalInfo()\n\n    }\n\n    //Funcion para eliminar a trabajador\n    const eliminarTrabajador = () => {\n        const id = datosSelected.login.uuid;\n        const n = data.filter(i => i.login.uuid !== id);\n        setData(n);\n        abrirCerrarModalEliminar()\n    }\n\n    //Funcion para mostrar informacion en el modal del usuario seleccionado\n    const bodyInfo = (\n\n        <div className={modal}>\n            <h3>Mas Información  <Edit onClick={() => changeTextfield()} /></h3>\n            <Avatar alt=\"Remy Sharp\" src={datosSelected && datosSelected.picture.large} className={large} />\n            <br />\n\n            <h4>Nombre</h4>\n            <TextField id=\"title\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial} onChange={handleChange} label=\"Titulo\" defaultValue={datosSelected && datosSelected.name.title} />\n            <TextField id=\"first\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial} onChange={handleChange} label=\"Nombre\" defaultValue={datosSelected && datosSelected.name.first} />\n            <TextField id=\"last\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial} onChange={handleChange} label=\"Apellido\" defaultValue={datosSelected && datosSelected.name.last} />\n            <br /><br />\n\n            <h4>Dirección</h4>\n            <TextField id=\"street\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial3} onChange={handleChange} label=\"Calle\" defaultValue={datosSelected && datosSelected.location.street.name} />\n            <TextField id=\"number\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial2} onChange={handleChange} label=\"Número\" defaultValue={datosSelected && datosSelected.location.street.number} /><br /><br />\n            <TextField id=\"city\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial2} onChange={handleChange} label=\"Ciudad\" defaultValue={datosSelected && datosSelected.location.city} />\n            <TextField id=\"state\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial3} onChange={handleChange} label=\"Estado\" defaultValue={datosSelected && datosSelected.location.state} /><br /><br />\n            <TextField id=\"country\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial2} onChange={handleChange} label=\"Pais\" defaultValue={datosSelected && datosSelected.location.country} />\n            <TextField id=\"postcode\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial2} onChange={handleChange}  label=\"Poscode\" defaultValue={datosSelected && datosSelected.location.postcode} />\n\n            <br /><br />\n            <h4>Datos personales</h4>\n            <TextField id=\"age\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial} onChange={handleChange} label=\"Edad\" defaultValue={datosSelected && datosSelected.dob.age} />\n            <TextField id=\"cell\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial2} onChange={handleChange} label=\"Telefono\" defaultValue={datosSelected && datosSelected.cell} /><br /><br />\n            <TextField id=\"email\" name=\"textfield\" disabled variant=\"outlined\" className={inputMaterial3} onChange={handleChange} label=\"Email\" defaultValue={datosSelected && datosSelected.email} />\n            <br /><br />\n            <div align=\"right\">\n                <Button color=\"primary\" onClick={() => abrirCerrarModalInfo()}>Salir</Button>\n                <Button name=\"textfield\"  onClick={() => updateTrabajador()}>Actualizar Datos</Button>\n            </div>\n        </div>\n    )\n\n    return (\n        <>\n            <Paper className={root}>\n                <TableContainer className={container}>\n                    <Table className={table} stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell> Nombre </StyledTableCell>\n                                <StyledTableCell> Edad </StyledTableCell>\n                                <StyledTableCell> Telefono </StyledTableCell>\n                                <StyledTableCell> Direccion </StyledTableCell>\n                                <StyledTableCell> Email </StyledTableCell>\n                                <StyledTableCell> Acciones </StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n\n                        <TableBody>\n                            {data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(\n                                (resp) => (\n                                    <StyledTableRow key={resp.login.uuid}>\n                                        <StyledTableCell>\n                                            {\" \"}\n                                            <Avatar alt=\"Remy Sharp\" src={resp.picture.thumbnail} />\n                                            {resp.name.title} {resp.name.first} {resp.name.last}{\" \"}\n                                        </StyledTableCell>\n                                        <StyledTableCell> {resp.dob.age} </StyledTableCell>\n                                        <StyledTableCell> {resp.cell} </StyledTableCell>\n                                        <StyledTableCell>\n                                            {\" \"}\n                                            {resp.location.street.name} {resp.location.street.number}, {resp.location.city} {resp.location.country}{\" \"}\n                                        </StyledTableCell>\n                                        <StyledTableCell> {resp.email} </StyledTableCell>\n                                        <StyledTableCell>\n                                            <InfoIcon className={iconos} onClick={() => seleccionarConsola(resp, 'Editar')} color=\"primary\" />\n                                        &nbsp;&nbsp;&nbsp;\n                                        <Delete color=\"secondary\" onClick={() => seleccionarConsola(resp, 'Eliminar')} />\n                                        </StyledTableCell>\n                                    </StyledTableRow>\n                                )\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <AddBoxIcon style={{ color: green[500] ,fontSize: 60 } }  onClick={() => seleccionarConsola(null, 'Editar')}/>\n                <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={data.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n\n                <Modal open={ModalInfo} onClose={abrirCerrarModalInfo}>\n                    {bodyInfo}\n                </Modal>\n\n                <Modal\n                    open={modalEliminar}\n                    onClose={abrirCerrarModalEliminar}>\n                    {bodyEliminar}\n                </Modal>\n            </Paper>\n        </>\n    );\n};\n\nexport default TablaTrabajadores;\n","import './App.css';\nimport React from 'react';\nimport TablaTrabajadores from './componentes/TablaTrabajadores';\n\n\n\nfunction App() {\n\n\n  return (\n    <TablaTrabajadores />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}